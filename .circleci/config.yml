

version: 2.1


commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}


defaults01: &node-img
  docker:
    - image: circleci/node:13.8.0
  resource_class: small

defaults02: &aws-img
  docker:
    - image: amazon/aws-cli
  resource_class: small


jobs:
  build-frontend:
    <<: *node-img
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *node-img
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *node-img
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    <<: *node-img
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *node-img
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    <<: *node-img
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    <<: *aws-img
    steps:
      - checkout
      - run:
          name: install tar & gzip
          command: |
            yum install tar -y
            yum install gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text \
              --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> ~/project/.circleci/ansible/inventory.txt
            exit 1###############################
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      ###############################################################
#      - test-frontend:
 #         requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
      #######################################################################
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          requires: [test-backend, scan-frontend, scan-backend]
       #   filters:
        #    branches:
         #     only: [test-feature-branch]
#      - configure-infrastructure:
 #         requires: [deploy-infrastructure]
  #    - run-migrations:
   #       requires: [configure-infrastructure]
    #  - deploy-frontend:
     #     requires: [run-migrations]
      #- deploy-backend:
       #   requires: [run-migrations]
#      - smoke-test:
 #         requires: [deploy-backend, deploy-frontend]
  #    - cloudfront-update:
   #       requires: [smoke-test]
    #  - cleanup:
     #     requires: [cloudfront-update]



