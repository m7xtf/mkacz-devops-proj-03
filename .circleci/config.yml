

version: 2.1


defaults01: &node-img
  docker:
    - image: circleci/node:13.8.0
  resource_class: small

defaults02: &aws-img
  docker:
    - image: amazon/aws-cli
  resource_class: small


commands:
  install-aws-cli-node-img:
    description: install aws cli at a circleci/node:13.8.0 container
    steps:
      - run:
          name: install aws cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi


jobs:
  build-frontend:
    <<: *node-img
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *node-img
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *node-img
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    <<: *node-img
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    <<: *node-img
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    <<: *node-img
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back-end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    <<: *aws-img
    steps:
      - checkout
      - run:
          name: install tar & gzip
          command: |
            yum install tar -y
            yum install gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "[web]" > ~/project/.circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text \
              --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    <<: *aws-img
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "ec:6d:a9:ee:0a:62:d8:0c:f0:71:2e:71:a9:c0:80:b3"      
      - run:
          name: Install dependencies
          command: |
            yum install tar -y
            yum install gzip -y
            yum install python3 -y
            yum install python3-pip -y
            yum install openssh-clients -y
            pip3 install ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    <<: *node-img
    steps:
      - checkout
      - install-aws-cli-node-img
      - run:
          name: Run migrations
          command: |
            cd ~/project/backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -k -d 1 https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment

  deploy-frontend:
    <<: *node-img
    steps:
      - checkout
      - install-aws-cli-node-img
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=`cat ~/project/.circleci/ansible/inventory.txt |grep "[0-9]"`
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
      
  deploy-backend:
    <<: *node-img
    steps:
      - checkout
      - install-aws-cli-node-img
      - add_ssh_keys:
          fingerprints:
            - "ec:6d:a9:ee:0a:62:d8:0c:f0:71:2e:71:a9:c0:80:b3"
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update -y
            sudo apt-get install python3 -y
            sudo apt-get install python3-pip -y
            sudo pip3 install ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    <<: *node-img # the reason to use a node img rather than a alpine img is that installation of AWS CLI (needed for rollbacks) fails at alpine
    steps:
      - checkout
      - install-aws-cli-node-img
      - attach_workspace:
          at: ~/
      - run:
          name: Backend smoke test.
          command: |
            sleep 60
            set -a
            . ~/project/frontend/.env
            echo ${API_URL}
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    <<: *node-img # the reason to use a node img rather than the aws-cli img is that node installation is needed for rollbacks
    steps:
      - checkout
      - install-aws-cli-node-img
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file ~/project/.circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople
      - destroy-environment
      - revert-migrations

  cleanup:
    <<: *aws-img
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws s3 ls|awk '{print $3}'|grep "^udapeople-[0-9a-z]*"|grep 25c401c -v|sed -e 's/\-/ /g'|awk '{print $2}')
            echo OldWorkflowID=${OldWorkflowID} > ~/project/.circleci/OldWorkflowID
            cat ~/project/.circleci/OldWorkflowID
      - run:
          name: Remove old stacks and files
          command: |
            cat ~/project/.circleci/OldWorkflowID
            set -a
            . ~/project/.circleci/OldWorkflowID
            aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
  
      






workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      ###############################################################
#      - test-frontend:
 #         requires: [build-frontend]
#      - test-backend:
 #         requires: [build-backend]
#      - scan-backend:
 #         requires: [build-backend]
#      - scan-frontend:
 #         requires: [build-frontend]
      - deploy-infrastructure:
      #######################################################################
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          requires: [build-backend, build-frontend]
       #   filters:
        #    branches:
         #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]



